{"version":3,"sources":["logo.svg","components/common/player.jsx","components/common/ground.jsx","components/common/parallax.jsx","components/common/background.jsx","components/common/environment.jsx","components/pages/home/panel.jsx","components/pages/home/homepage.jsx","components/pages/notfound/panel.jsx","components/pages/notfound/notfound.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Player","props","useState","isCenter","isRunning","invert","className","style","animationName","transform","Ground","ground","setGround","moving","spawnGroundTile","start","right","animationPlayState","spawnGround","_ground","push","useEffect","Parallax","bg","setBg","spawnParallax","backgroundImage","image","animationDuration","index","_bg","spawnBackground","Background","Environment","Panel","HomePage","history","useHistory","onClick","NotFound","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7ba22b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component, useState } from 'react';\r\n\r\nimport \"../../css/player.css\";\r\n\r\n\r\n\r\nfunction Player(props) {\r\n    const [isCenter, setIsCenter] = useState(props.isCenter);\r\n    const [isRunning, setIsRunning] = useState(props.isRunning);\r\n    const [invert, setInvert] = useState(props.invert);\r\n\r\n    return (\r\n        <div className = {\r\n            (isCenter) ? \"player center-middle\" : \"player\"\r\n        } style={{\r\n            animationName: (isRunning)? \"animate-running\": \"animate-idle\",\r\n            transform: `scaleX(${(invert?-1:1)})`\r\n        }}>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Player;","import React, { useEffect, useState } from 'react';\r\n\r\nimport '../../css/ground.css';\r\n\r\n\r\nfunction Ground(props) {\r\n\r\n    const [ground, setGround] = useState([]);\r\n    const [moving, setMoving] = useState(props.moving);\r\n\r\n    const spawnGroundTile = (start) => {\r\n        if(!moving){\r\n            let spawnedGroundTile = <div \r\n            className=\"ground position-absolute\" \r\n            style = {{\r\n                animationPlayState: \"paused\",\r\n                right: `0vw`\r\n            }}\r\n            ></div>\r\n\r\n            return spawnedGroundTile;\r\n        }else{\r\n            let spawnedGroundTile = <div \r\n                className=\"ground position-absolute\" \r\n                style = {{\r\n                    right: `${start}vw`,\r\n                    animationPlayState: \"running\"\r\n                }}\r\n            ></div>\r\n\r\n            return spawnedGroundTile;\r\n        }\r\n    }\r\n\r\n    const spawnGround = () => {\r\n        let _ground = [];\r\n        _ground.push(spawnGroundTile(0));\r\n        _ground.push(spawnGroundTile(-100));\r\n        setGround(_ground);\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        spawnGround();\r\n    }, [])\r\n\r\n    // spawn ground again when moving changes\r\n    useEffect(() => {\r\n        spawnGround();\r\n    }, [moving])\r\n\r\n\r\n    return (\r\n        <div>\r\n            {ground}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Ground;","import React, { Component, useEffect, useState } from 'react';\r\nimport '../../css/background.css';\r\n\r\n\r\nfunction Parallax(props) {\r\n    const [bg, setBg] = useState([]);\r\n    const [moving, setMoving] = useState(props.moving);\r\n\r\n    const spawnParallax = (start) => {\r\n        if(!moving){\r\n            let spawnedBg = <div \r\n                className=\"parallax\" \r\n                style={{\r\n                    right: `${start}vw`,\r\n                    backgroundImage: `url('${props.image}')`,\r\n                    animationPlayState: \"paused\"\r\n                }}\r\n            ></div>\r\n            \r\n            return spawnedBg;\r\n        }else{\r\n            let spawnedBg = <div \r\n                className=\"parallax\" \r\n                style={{\r\n                    right: `${start}vw`,\r\n                    backgroundImage: `url('${props.image}')`,\r\n                    animationDuration: `${props.index}s`,\r\n                    animationPlayState: \"running\"\r\n                }}\r\n            ></div>\r\n\r\n            return spawnedBg;\r\n        }\r\n    }\r\n\r\n    const spawnBackground = () => {\r\n        let _bg = [];\r\n        _bg.push(spawnParallax(0));\r\n        _bg.push(spawnParallax(-100));\r\n        setBg(_bg);\r\n    }\r\n\r\n    useEffect(() => {\r\n        spawnBackground();\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"w-100 h-100\">\r\n            {bg}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Parallax;","import React, { Component } from 'react';\r\n\r\n// components\r\nimport Parallax from './parallax';\r\n\r\n\r\nfunction Background(props) {\r\n    const parallax_1 = \"/assets/forest_bg.png\";\r\n    const parallax_2 = \"/assets/forest_parallax_2_small.png\";\r\n    const parallax_3 = \"/assets/forest_parallax_3_small.png\";\r\n    const parallax_4 = \"/assets/forest_parallax_4_med.png\";\r\n\r\n    return (\r\n        <div>\r\n            <Parallax image={parallax_1} index={0} moving={false} />\r\n            <Parallax image={parallax_2} index={24} moving={props.moving} />\r\n            <Parallax image={parallax_3} index={16} moving={props.moving} />\r\n            <Parallax image={parallax_4} index={10} moving={props.moving} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Background;","import React, { Component } from 'react';\r\n\r\nimport Ground from './ground';\r\nimport Background from './background';\r\n\r\n\r\nfunction Environment(props) {\r\n    return (\r\n        <div>\r\n            <Ground\r\n                moving = {props.moving}\r\n            />\r\n            <Background\r\n                moving = {props.moving}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Environment;","import React, { Component } from 'react';\r\nimport '../../../css/homepanel.css';\r\nimport '../../../css/misc.css';\r\n\r\n\r\nfunction Panel(props) {\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-10 col-lg-5 mx-auto position-relative home-panel\">\r\n                    <div className=\"h-100 w-100 d-flex flex-column justify-content-end text-white p-0\">\r\n                        <h1 className=\"size-60\">Hello World</h1>\r\n                        <p className=\"size-40 mb-3 mt-4\">my name is <span className=\"color-red\">kar wei</span> and learning is my passion</p>\r\n                        <p className=\"mt-3 size-30 color-orange\">click here to find out more about me!</p>\r\n\r\n                        <a className=\"start-btn size-40 mb-2 mt-3\">start</a>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Panel;","import React, { Component } from 'react';\r\n\r\n//components\r\nimport Player from '../../common/player';\r\nimport Environment from '../../common/environment';\r\nimport Panel from './panel';\r\n\r\n\r\nfunction HomePage(props) {\r\n    return (\r\n        <div>\r\n            <Panel/>\r\n\r\n            <Player\r\n                isCenter = {true}\r\n                isRunning = {true}\r\n            />\r\n\r\n            <Environment\r\n                moving = {true}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;","import React, { Component } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport '../../../css/homepanel.css';\r\nimport '../../../css/misc.css';\r\n\r\nfunction Panel(props) {\r\n    const history = useHistory();\r\n\r\n    const toHome = () =>{\r\n        history.push(\"/\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-10 col-lg-5 mx-auto position-relative home-panel not-found-panel\">\r\n                    <div className=\"h-100 w-100 d-flex flex-column justify-content-end text-white p-0\">\r\n                        <h1 className=\"size-60 color-red\">Not found!</h1>\r\n                        <p className=\"size-40 mb-3 mt-4\">The page you are looking for is either in progress or don't exist!</p>\r\n\r\n                        <button \r\n                            className=\"start-btn size-40 mb-2 mt-3\"\r\n                            onClick = {() => toHome()}\r\n                        >back to home</button>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Panel;","import React from 'react';\r\n\r\nimport Panel from './panel';\r\nimport Player from '../../common/player';\r\nimport Environment from '../../common/environment';\r\n\r\nfunction NotFound(props) {\r\n    return (\r\n        <div>\r\n            <Panel/>\r\n\r\n            <Player\r\n                isCenter = {true}\r\n                isRunning = {false}\r\n            />\r\n\r\n            <Environment\r\n                moving = {false}\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\nimport {HashRouter as Router, Switch, Route, Link, Redirect} from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\n\n// pages\nimport HomePage from './components/pages/home/homepage';\nimport NotFound from './components/pages/notfound/notfound';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Router basename=\"/\">\n        <Switch>\n          <Route\n            exact = {true}\n            path = \"/\"\n            component = {HomePage}\n          />\n\n          <Route\n            component = {NotFound}\n          />\n        </Switch>\n\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}