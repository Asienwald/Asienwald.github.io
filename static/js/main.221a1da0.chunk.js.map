{"version":3,"sources":["logo.svg","components/common/parallax.jsx","components/common/background.jsx","components/common/player.jsx","components/common/panel.jsx","components/common/ground.jsx","components/pages/homepage.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Parallax","props","state","bg","bgAnimEnd","moving","count","start","this","className","style","right","backgroundImage","image","animationPlayState","spawnedBg","key","animationDuration","index","onAnimationEnd","setState","console","log","push","spawnParallax","spawnBackground","Component","Background","Player","isCenter","isRunning","invert","animationName","transform","Panel","Ground","ground","groundAnimEnd","spawnedGroundTile","spawnGroundTile","spawnGround","HomePage","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,2QC2F5BC,G,wDAvFX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CACTC,GAAI,GACJC,WAAW,EACXC,OAAQ,EAAKJ,MAAMI,QAEvB,EAAKC,OAAS,EARA,E,0DAWJC,GAAO,IAAD,OAChB,IAAIC,KAAKN,MAAMG,OAUX,OATgB,yBACZI,UAAU,WACVC,MAAO,CACHC,MAAM,GAAD,OAAKJ,EAAL,MACLK,gBAAgB,QAAD,OAAUJ,KAAKP,MAAMY,MAArB,MACfC,mBAAoB,YAOhC,IAAIR,EAAQE,KAAKF,MACjBE,KAAKF,MAAQA,EAAQ,EACrB,IAAIS,EAAY,yBACZC,IAAOR,KAAKF,MACZG,UAAU,WACVC,MAAO,CACHC,MAAM,GAAD,OAAKJ,EAAL,MACLK,gBAAgB,QAAD,OAAUJ,KAAKP,MAAMY,MAArB,MACfI,kBAAkB,GAAD,OAAKT,KAAKP,MAAMiB,MAAhB,MAErBC,eAAgB,kBAAM,EAAKC,SAAS,CAAChB,WAAW,OAMpD,OADAiB,QAAQC,IAAI,sBACLP,I,wCAYP,IAAIZ,EAAKK,KAAKN,MAAMC,GAOpB,OANAA,EAAGoB,KAAKf,KAAKgB,cAAc,IAC3BrB,EAAGoB,KAAKf,KAAKgB,eAAe,MAE5BhB,KAAKY,SAAS,CAACjB,GAAIA,IAGZK,KAAKN,MAAMC,K,wCAGJF,GACdO,KAAKiB,oB,yCAGUxB,EAAOC,IACM,IAAzBM,KAAKN,MAAME,WACVI,KAAKY,SAAS,CAAChB,WAAW,M,+BAS9B,OACI,yBAAKK,UAAU,gBACgB,IAAzBD,KAAKN,MAAME,UAAsBI,KAAKN,MAAMC,GAAI,U,GAjF3CuB,cCsBRC,E,uKAZP,OACI,6BACI,kBAAC,EAAD,CAAUd,MAVP,wBAU0BK,MAAO,EAAGb,QAAQ,IAC/C,kBAAC,EAAD,CAAUQ,MAVP,sCAU0BK,MAAO,GAAIb,OAAQG,KAAKP,MAAMI,SAC3D,kBAAC,EAAD,CAAUQ,MAVP,sCAU0BK,MAAO,GAAIb,OAAQG,KAAKP,MAAMI,SAC3D,kBAAC,EAAD,CAAUQ,MAVP,oCAU0BK,MAAO,GAAIb,OAAQG,KAAKP,MAAMI,c,GAPlDqB,aCqBVE,G,wDAzBX,WAAY3B,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CACT2B,SAAU,EAAK5B,MAAM4B,SACrBC,UAAW,EAAK7B,MAAM6B,UACtBC,QAAQ,GANE,E,qDAad,OACI,yBAAKtB,UACAD,KAAKN,MAAM2B,SAAY,uBAAyB,SACnDnB,MAAO,CACLsB,cAAgBxB,KAAKN,MAAM4B,UAAY,kBAAmB,eAC1DG,UAAU,UAAD,OAAazB,KAAKN,MAAM6B,QAAQ,EAAE,EAAlC,Y,GAnBJL,cCmBNQ,G,mLAnBP,OACI,yBAAKzB,UAAU,mBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,kEACX,yBAAKA,UAAU,qEACX,wBAAIA,UAAU,WAAd,eACA,uBAAGA,UAAU,qBAAb,cAA4C,0BAAMA,UAAU,aAAhB,WAA5C,+BACA,uBAAGA,UAAU,6BAAb,yCAEA,4BAAQA,UAAU,+BAAlB,iB,GAXRiB,cCuELS,G,wDArEX,WAAYlC,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CACTkC,OAAQ,GACRC,eAAe,EACfhC,OAAQ,EAAKJ,MAAMI,QANT,E,4DAYFE,GAAO,IAAD,OAClB,IAAKC,KAAKN,MAAMG,OASZ,OARwB,yBACxBI,UAAU,2BACVC,MAAS,CACLI,mBAAoB,SACpBH,MAAM,SAOd,IAAI2B,EAAoB,yBACpB7B,UAAU,2BACVC,MAAS,CACLC,MAAM,GAAD,OAAKJ,EAAL,OAETY,eAAgB,kBAAM,EAAKC,SAAS,CAACiB,eAAe,OAKxD,OAFAhB,QAAQC,IAAI,aAELgB,I,oCAKP,IAAIF,EAAS5B,KAAKN,MAAMkC,OACxBA,EAAOb,KAAKf,KAAK+B,gBAAgB,IACjCH,EAAOb,KAAKf,KAAK+B,iBAAiB,MAClC/B,KAAKY,SAAS,CAACgB,OAAQA,M,wCAKTnC,GAEdO,KAAKgC,gB,yCAGUvC,EAAOC,IAEU,IAA7BM,KAAKN,MAAMmC,eACV7B,KAAKY,SAAS,CAACiB,eAAe,M,+BAKlC,OACI,8BACmC,IAA7B7B,KAAKN,MAAMmC,cAA0B7B,KAAKN,MAAMkC,OAAQ,U,GAhErDV,cC2BNe,E,uKArBP,OACI,6BACI,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACIZ,UAAY,EACZC,WAAa,IAGjB,kBAAC,EAAD,CACIzB,QAAU,IAGd,kBAAC,EAAD,CACIA,QAAU,S,GAhBPqB,aCsBRgB,MAjBf,WACE,OACE,yBAAKjC,UAAU,OAEb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEkC,OAAO,EACPC,KAAO,IACPC,UAAaJ,OCVHK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.221a1da0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport '../../css/background.css';\r\n\r\nclass Parallax extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            bg: [],\r\n            bgAnimEnd: false,\r\n            moving: this.props.moving\r\n        }\r\n        this.count = -1;\r\n    }\r\n\r\n    spawnParallax(start){\r\n        if(!this.state.moving){\r\n            let spawnedBg = <div \r\n                className=\"parallax\" \r\n                style={{\r\n                    right: `${start}vw`,\r\n                    backgroundImage: `url('${this.props.image}')`,\r\n                    animationPlayState: \"paused\"\r\n                }}\r\n            ></div>\r\n            \r\n            return spawnedBg;\r\n        }\r\n\r\n        let count = this.count;\r\n        this.count = count + 1;\r\n        let spawnedBg = <div \r\n            key = {this.count}\r\n            className=\"parallax\" \r\n            style={{\r\n                right: `${start}vw`,\r\n                backgroundImage: `url('${this.props.image}')`,\r\n                animationDuration: `${this.props.index}s`\r\n            }}\r\n            onAnimationEnd={() => this.setState({bgAnimEnd: true})}\r\n            // onAnimationStartCapture\r\n        ></div>\r\n        \r\n        // console.log(spawnedBg);\r\n        console.log(\"spawning parallax!\");\r\n        return spawnedBg;\r\n    }\r\n\r\n    spawnBackground(){\r\n        // this.setState(state => {\r\n        //     state.bg.push(this.spawnParallax(0));\r\n        //     state.bg.push(this.spawnParallax(-100));\r\n\r\n        //     // console.log(state.bg)\r\n        //     return state;\r\n        // })\r\n\r\n        let bg = this.state.bg;\r\n        bg.push(this.spawnParallax(0));\r\n        bg.push(this.spawnParallax(-100));\r\n\r\n        this.setState({bg: bg});\r\n\r\n\r\n        return this.state.bg;\r\n    }\r\n\r\n    componentDidMount(props){\r\n        this.spawnBackground();\r\n    }\r\n\r\n    componentDidUpdate(props, state){\r\n        if(this.state.bgAnimEnd === true){\r\n            this.setState({bgAnimEnd: false});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // let bgList = (this.state.bgAnimEnd === false)? this.state.bg :null\r\n        // bgList.map((list, index) => {\r\n            \r\n        // })\r\n        return (\r\n            <div className=\"w-100 h-100\">\r\n                {(this.state.bgAnimEnd === false)? this.state.bg :null}\r\n                {/* {this.spawnParallax(-200)} */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Parallax;","import React, { Component } from 'react';\r\n\r\n// components\r\nimport Parallax from './parallax';\r\n\r\nconst parallax_1 = \"/assets/forest_bg.png\";\r\nconst parallax_2 = \"/assets/forest_parallax_2_small.png\";\r\nconst parallax_3 = \"/assets/forest_parallax_3_small.png\";\r\nconst parallax_4 = \"/assets/forest_parallax_4_med.png\";\r\n\r\n\r\nclass Background extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Parallax image={parallax_1} index={0} moving={false} />\r\n                <Parallax image={parallax_2} index={24} moving={this.props.moving} />\r\n                <Parallax image={parallax_3} index={16} moving={this.props.moving} />\r\n                <Parallax image={parallax_4} index={10} moving={this.props.moving} />\r\n                {/* <Parallax image={parallax_4} index={4}></Parallax> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Background;","import React, { Component } from 'react';\r\n\r\nimport \"../../css/player.css\";\r\n\r\n\r\n\r\nclass Player extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isCenter: this.props.isCenter,\r\n            isRunning: this.props.isRunning,\r\n            invert: false\r\n        };\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className = {\r\n                (this.state.isCenter) ? \"player center-middle\" : \"player\"\r\n            } style={{\r\n                animationName: (this.state.isRunning)? \"animate-running\": \"animate-idle\",\r\n                transform: `scaleX(${(this.state.invert?-1:1)})`\r\n            }}>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Player;","import React, { Component } from 'react';\r\nimport '../../css/homepanel.css';\r\nimport '../../css/misc.css';\r\n\r\nclass Panel extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 col-md-10 col-lg-5 mx-auto position-relative home-panel\">\r\n                        <div className=\"h-100 w-100 d-flex flex-column justify-content-end text-white p-0\">\r\n                            <h1 className=\"size-60\">Hello World</h1>\r\n                            <p className=\"size-40 mb-3 mt-4\">my name is <span className=\"color-red\">kar wei</span> and learning is my passion</p>\r\n                            <p className=\"mt-3 size-30 color-orange\">click here to find out more about me!</p>\r\n\r\n                            <button className=\"start-btn size-40 mb-2 mt-3\">start</button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Panel;","import React, { Component } from 'react';\r\n\r\nimport '../../css/ground.css';\r\n\r\n\r\nclass Ground extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            ground: [],\r\n            groundAnimEnd: false,\r\n            moving: this.props.moving\r\n        }\r\n\r\n        // this.moving = true;\r\n    }\r\n\r\n    spawnGroundTile(start){\r\n        if (!this.state.moving){\r\n            let spawnedGroundTile = <div \r\n            className=\"ground position-absolute\" \r\n            style = {{\r\n                animationPlayState: \"paused\",\r\n                right: `0vw`\r\n            }}\r\n            ></div>\r\n\r\n            return spawnedGroundTile;\r\n        }\r\n\r\n        let spawnedGroundTile = <div \r\n            className=\"ground position-absolute\" \r\n            style = {{\r\n                right: `${start}vw`\r\n            }}\r\n            onAnimationEnd={() => this.setState({groundAnimEnd: true})}\r\n        ></div>\r\n\r\n        console.log(\"spawning!\");\r\n\r\n        return spawnedGroundTile;\r\n    }\r\n\r\n    spawnGround(){\r\n\r\n        let ground = this.state.ground;\r\n        ground.push(this.spawnGroundTile(0));\r\n        ground.push(this.spawnGroundTile(-100));\r\n        this.setState({ground: ground});\r\n\r\n        // console.log(this.ground);\r\n    }\r\n\r\n    componentDidMount(props){\r\n        // console.log(this.groundTile);\r\n        this.spawnGround();\r\n    }\r\n\r\n    componentDidUpdate(props, state){\r\n\r\n        if(this.state.groundAnimEnd === true){\r\n            this.setState({groundAnimEnd: false});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {(this.state.groundAnimEnd === false)? this.state.ground :null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ground;","import React, { Component } from 'react';\r\n\r\n//components\r\nimport Background from '../common/background';\r\nimport Player from '../common/player';\r\nimport Panel from '../common/panel';\r\nimport Ground from '../common/ground';\r\n\r\n\r\nclass HomePage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Panel/>\r\n\r\n                <Player\r\n                    isCenter = {true}\r\n                    isRunning = {true}\r\n                />\r\n\r\n                <Ground\r\n                    moving = {true}\r\n                />\r\n\r\n                <Background\r\n                    moving = {true}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\n\n// components\n// import Background from './components/common/background';\n// import Player from './components/common/player';\n// import Panel from './components/common/panel';\n// import Ground from './components/common/ground';\n\n// pages\nimport HomePage from './components/pages/homepage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Router>\n        <Route\n          exact={true}\n          path = \"/\"\n          component = {HomePage}\n        />\n\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}